# R Code for project

## Before running the install_keras() I installed
## Andaconda3 on my computer 

```{r}
install.packages("keras")
install.packages("readr")
install.packages("imager")
install.packages("magick")
install.packages("tidyverse")
library("keras")
library("readr")
library("imager")
library("magick")
library("tidyverse")
install_keras()
```

## Loading and viewing the data

```{r}
setwd("~/Capstone")
getwd()
bee_data <- read_csv("bee_data.csv", col_types = cols(date = col_date(format = "%D"),
time = col_time(format = "%H:%M")))
View(bee_data)
head(bee_data)
summary(bee_data)
 

```

## Function to help read and preprocess images if needed

```{r}

image_prep <- function(x) {
  arrays <- lapply(x, function(path) {
    img <- image_load(path, target_size = c(224, 224))
    x <- image_to_array(img)
    x <- array_reshape(x, c(1, dim(x)))
    x <- imagenet_preprocess_input(x)
  })
  do.call(abind::abind, c(arrays, list(along = 1)))
}

```

### Input images

```{r}
Image_folder <- "C:/Users/ncarp/Documents/Capstone/BeeImages"
names <- list.files(Image_folder)

```

### Image size (to make sure each image is the same size)

```{r}
img_width <- 100
img_height <- 100
target_size <- c(img_width, img_height)

```

## RGB = 3 channels
```{r}
channels <- 3
```

### Path to image training and validation folders

```{r}
train_image_files_path<-"C:/Users/ncarp/Documents/Capstone/Training/"
validation_image_file_path<-"C:/Users/ncarp/Documents/Capstone/Validation/"
```

### load training images

```{r}

train_image_array_gen <- flow_images_from_directory(train_image_files_path, 
                                          train_data_gen,
                                          target_size = target_size,
                                          class_mode = "categorical",
                                          classes = health,
                                          seed = 42)

validation_image_array_gen <- flow_images_from_directory(validation_image_files_path, 
                                          valid_data_gen,
                                          target_size = target_size,
                                          class_mode = "categorical",
                                          classes = health,
                                          seed = 42)

cat("Number of images per class:")
table(factor(train_image_array_gen$classes))
cat("\nClass label vs index mapping:\n")
train_image_array_gen$class_indices
health_classes_indices <- train_image_array_gen$class_indices
save(health_classes_indices, file = "C:/Users/ncarp/Documents/Capstone/health_classes_indices.RData")
```



Keras model planning example I'm trying to incorporate: 


# Defining Model ----------------------------------------------------------

# Initialize sequential model
model <- keras_model_sequential()

model %>%
 
  # Start with hidden 2D convolutional layer being fed 32x32 pixel images
  layer_conv_2d(
    filter = 32, kernel_size = c(3,3), padding = "same", 
    input_shape = c(32, 32, 3)
  ) %>%
  layer_activation("relu") %>%

  # Second hidden layer
  layer_conv_2d(filter = 32, kernel_size = c(3,3)) %>%
  layer_activation("relu") %>%

  # Use max pooling
  layer_max_pooling_2d(pool_size = c(2,2)) %>%
  layer_dropout(0.25) %>%
  
  # 2 additional hidden 2D convolutional layers
  layer_conv_2d(filter = 32, kernel_size = c(3,3), padding = "same") %>%
  layer_activation("relu") %>%
  layer_conv_2d(filter = 32, kernel_size = c(3,3)) %>%
  layer_activation("relu") %>%

  # Use max pooling once more
  layer_max_pooling_2d(pool_size = c(2,2)) %>%
  layer_dropout(0.25) %>%
  
  # Flatten max filtered output into feature vector 
  # and feed into dense layer
  layer_flatten() %>%
  layer_dense(512) %>%
  layer_activation("relu") %>%
  layer_dropout(0.5) %>%

  # Outputs from dense layer are projected onto 10 unit output layer
  layer_dense(10) %>%
  layer_activation("softmax")

opt <- optimizer_rmsprop(lr = 0.0001, decay = 1e-6)

model %>% compile(
  loss = "categorical_crossentropy",
  optimizer = opt,
  metrics = "accuracy"
)


# Training ----------------------------------------------------------------

if(!data_augmentation){
  
  model %>% fit(
    x_train, y_train,
    batch_size = batch_size,
    epochs = epochs,
    validation_data = list(x_test, y_test),
    shuffle = TRUE
  )
  
} else {
  
  datagen <- image_data_generator(
    rotation_range = 20,
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    horizontal_flip = TRUE
  )
  
  datagen %>% fit_image_data_generator(x_train)
  
  model %>% fit_generator(
    flow_images_from_data(x_train, y_train, datagen, batch_size = batch_size),
    steps_per_epoch = as.integer(50000/batch_size), 
    epochs = epochs, 
    validation_data = list(x_test, y_test)
  )
  
}

